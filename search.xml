<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyBatis</title>
      <link href="2021/08/14/mybatis/"/>
      <url>2021/08/14/mybatis/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SMBMS</title>
      <link href="2021/08/13/smbms/"/>
      <url>2021/08/13/smbms/</url>
      
        <content type="html"><![CDATA[<h1 id="SMBMS"><a href="#SMBMS" class="headerlink" title="SMBMS"></a>SMBMS</h1><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-13_14-02-48.png"></p><p>数据库</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-13_14-06-38.png"></p><h2 id="项目如何搭建"><a href="#项目如何搭建" class="headerlink" title="项目如何搭建"></a>项目如何搭建</h2><p>考虑使用Maven</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><ol><li><p>搭建一个Maven web项目</p></li><li><p>配置Tomcat</p></li><li><p>测试项目是否能够跑起来</p></li><li><p>导入项目中会碰到的jar包</p></li><li><p>创建项目包结构</p></li><li><p>编写实体类</p><p>ORM映射</p></li><li><p>编写基础公共类</p><ol><li>数据库配置文件</li><li>编写数据的的公共类</li><li>编写字符编码过滤器</li></ol></li><li><p>导入静态资源</p></li></ol><h2 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h2><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-13_14-53-29.png"></p><ol><li>编写前端页面</li><li>设置首页</li><li>编写DAO蹭用户登录的接口</li><li>编写DAO接口的实现类</li><li>业务层接口</li><li>业务层实现类</li><li>编写Servlet</li><li>注册Servlet</li><li>测试访问</li></ol><h2 id="登录功能优化"><a href="#登录功能优化" class="headerlink" title="登录功能优化"></a>登录功能优化</h2><p>注销功能：移除Session，返回登录页面</p><p>登录拦截：过滤器</p><h2 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h2><ol><li>导入前端素材</li><li>写项目，建议从底层往上写</li><li>UserDAO接口</li><li>UserDAO实现类</li><li>UserService接口</li><li>UserService实现类</li><li>提取方法，实现复用</li><li>测试</li></ol><h2 id="使用Ajax优化"><a href="#使用Ajax优化" class="headerlink" title="使用Ajax优化"></a>使用Ajax优化</h2><ol><li>alibaba的fastJSON</li><li>javax</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象与类</title>
      <link href="2021/08/07/dui-xiang-yu-lei/"/>
      <url>2021/08/07/dui-xiang-yu-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类是构造对象的模板或蓝图</p><p>实现封装的关键在于，决不能让类中的方法直接访问其他类的实例字段</p><p>在Java中，所有的类都源自一个“神通广大的类”，Object。所有其他类都扩展自这个类</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="2021/08/06/javaweb/"/>
      <url>2021/08/06/javaweb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><p>Java + Web</p><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p><ul><li>web，网页</li><li>静态web<ul><li>html、css</li><li>提供给所有人看的数据，始终不会发生变化</li></ul></li><li>动态web<ul><li>提供给所有人看的数据始终会发生变化，每个人的信息都不相同</li><li>技术栈：Servlet/JSP, ASP, PHP</li></ul></li></ul><p>在Java中，动态web资源开发的技术统称为JavaWeb</p><h3 id="1-2、-web应用程序"><a href="#1-2、-web应用程序" class="headerlink" title="1.2、 web应用程序"></a>1.2、 web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序</p><ul><li>多个web资源，这些web资源可以被外界访问，对外界提供服务</li><li>能访问到的任何页面和资源都存在于这个世界的某一个角落的计算机上</li><li>URL</li><li>这个统一的web资源会被放在同一个文件夹下，web应用程序-&gt;Tomcat：服务器</li><li>一个web应用由多部分组成（静态，动态）<ul><li>html、css、js</li><li>jsp、servlet</li><li>Java程序</li><li>jar包</li><li>配置文件（Properties）</li></ul></li></ul><p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理</p><h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul><li>*.html网页后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取</li></ul><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-06_19-45-51.png"></p><ul><li>静态web存在的缺点<ul><li>web页面无法动态更新，所有用户看到的都是同一个页面<ul><li>轮播图、点击特效：伪动态</li><li>JavaScript</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化）</li></ul></li></ul><h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>页面会动态展示：“Web页面的展示效果因人而异”</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-06_19-53-41.png"></p><p>缺点</p><ul><li>假如服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>，重新发布<ul><li>停机维护</li></ul></li></ul><p>优点</p><ul><li>web页面可以动态更新，所有用户看到的不是同一个页面</li><li>它可以和数据库交互（数据可以持久化）</li></ul><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-06_19-58-02.png"></p><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><p>ASP</p><ul><li>微软：国内最早流行的就是ASP</li><li>在HTML中嵌入了VB的脚本，ASP+COM</li><li>在ASP开发中，基本一个页面都有几千行的业务代码，页面紊乱</li><li>维护成本高</li><li>C#</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PHP</p><ul><li>开发速度快，功能强大，跨平台，代码简单（70%）</li><li>无法承载大访问量的情况（局限性）</li></ul><p>JSP/Servlet</p><p>B/S：浏览和服务器</p><p>C/S：客户端和服务器</p><ul><li>Sun公司主推的B/S架构</li><li>基于Java语言</li><li>可以承载三高问题带来的影响</li><li>语法像ASP，加强市场强度</li></ul><h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户的一些响应信息</p><p>IIS</p><p>微软的：ASP……Windows中自带的</p><p>Tomcat</p><h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1、安装Tomcat"><a href="#3-1、安装Tomcat" class="headerlink" title="3.1、安装Tomcat"></a>3.1、安装Tomcat</h3><h3 id="3-2、启动Tomcat"><a href="#3-2、启动Tomcat" class="headerlink" title="3.2、启动Tomcat"></a>3.2、启动Tomcat</h3><h3 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h3><ul><li>可以配置启动的端口号<ul><li>Tomcat：8080</li><li>MySQL：3306</li><li>Http：80</li><li>Https：443</li></ul></li><li>可以配置主机的名称<ul><li>默认的主机名为：localhost</li><li>默认网站应用存放的位置为：webapps</li></ul></li></ul><p><strong>面试题：</strong></p><p>请你谈谈网站是如何进行访问的？</p><ol><li>输入一个域名，回车</li><li>检查本机的C:\Windows\System32\drivers\etc配置文件下有没有这个域名的映射<ol><li>有：返回对应的ip地址。这个地址中，有我们需要访问的web程序，可以直接访问</li><li>没有：去DNS服务器查找，找到就返回</li></ol></li></ol><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-07_10-26-59.png"></p><h3 id="3-4、发布一个web网站"><a href="#3-4、发布一个web网站" class="headerlink" title="3.4、发布一个web网站"></a>3.4、发布一个web网站</h3><p>将自己写的网站，放到服务器Tomcat中指定的web应用文件夹下，就可以访问了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--webapps：Tomcat服务器的web目录</span><br><span class="line">    -ROOT</span><br><span class="line">    -xxxx：网站的目录名</span><br><span class="line">    -WEB-INF</span><br><span class="line">    -classes：Java程序</span><br><span class="line">    -lib：web应用所依赖的jar包</span><br><span class="line">    -web.xml：网站配置文件</span><br><span class="line">    -xxx.html：默认的首页</span><br><span class="line">    -<span class="keyword">static</span></span><br><span class="line">    -css</span><br><span class="line">    -……</span><br></pre></td></tr></table></figure><h2 id="4、Http"><a href="#4、Http" class="headerlink" title="4、Http"></a>4、Http</h2><h3 id="4-1、什么是Http"><a href="#4-1、什么是Http" class="headerlink" title="4.1、什么是Http"></a>4.1、什么是Http</h3><p>HTTP（超文本传输协议）是一个简单的请求响应协议，运行在TCP之上</p><ul><li>文本：HTML，字符串，……</li><li>超文本：图片，音乐，视频，定位，地图……</li><li>80</li></ul><p>HTTPS：</p><ul><li>443</li></ul><h3 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h3><ul><li>http1.0<ul><li>HTTP/1.0：客户端可以与web服务器连接，只能获得一个web资源，断开连接</li></ul></li><li>http2.0<ul><li>HTTP/1.1：客户端可以与web服务器连接，可以获得多个web资源</li></ul></li></ul><h3 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h3><ul><li>客户端——发请求——服务器</li></ul><p>以百度为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求 URL: https:<span class="comment">//www.baidu.com/?tn=49055317_13_hao_pg</span></span><br><span class="line">请求方法: GET</span><br><span class="line">状态代码: <span class="number">200</span> OK</span><br><span class="line">远程地址: <span class="number">36.152</span><span class="number">.44</span><span class="number">.96</span>:<span class="number">443</span></span><br><span class="line">引用站点策略: strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure><h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><ul><li>请求行中的请求方式：Get</li><li>请求方式：<strong>Get/POST</strong>，HEAD，DELETE……<ul><li>GET：请求能够携带的参数比较少，大小有限制，会在浏览器的地址栏显示数据内容，不安全，但高效</li><li>POST：请求携带的参数没有限制，大小没有限制，安全</li></ul></li></ul><h4 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Accept: 告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding: 支持那种编码格式</span><br><span class="line">Accept-Language: 支持的语言环境</span><br><span class="line">Cache-Control: 缓存控制</span><br><span class="line">Connection: 告诉浏览器，请求完成是断开还是保持连接</span><br></pre></td></tr></table></figure><h3 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h3><ul><li>服务器——响应——客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: <span class="keyword">private</span></span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html;charset=utf-<span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="1、响应体"><a href="#1、响应体" class="headerlink" title="1、响应体"></a>1、响应体</h4><h4 id="2、响应状态码"><a href="#2、响应状态码" class="headerlink" title="2、响应状态码"></a>2、响应状态码</h4><p>200：请求响应成功</p><p>3**：请求重定向</p><ul><li>重定向：重新到给定的新位置</li></ul><p>4**：找不到资源</p><p>5**：服务器代码错误</p><p><strong>常见面试题</strong>：</p><p>当浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p><h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p><strong>为什么要学习这个技术？</strong></p><ol><li>在JavaWeb开发中，需要使用大量的jar包，我们手动去导入</li><li>如何能够让一个东西自动帮我导入和配置这个jar包</li></ol><h3 id="5-1、Maven项目架构管理工具"><a href="#5-1、Maven项目架构管理工具" class="headerlink" title="5.1、Maven项目架构管理工具"></a>5.1、Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的</p><p>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反</li></ul><p>Maven会规定好如何去编写Java，必须要按照规范来</p><h3 id="5-2、下载安装Maven"><a href="#5-2、下载安装Maven" class="headerlink" title="5.2、下载安装Maven"></a>5.2、下载安装Maven</h3><h3 id="5-3、配置环境变量"><a href="#5-3、配置环境变量" class="headerlink" title="5.3、配置环境变量"></a>5.3、配置环境变量</h3><h3 id="5-4、阿里云镜像"><a href="#5-4、阿里云镜像" class="headerlink" title="5.4、阿里云镜像"></a>5.4、阿里云镜像</h3><ul><li>镜像：mirrors<ul><li>作用：加速我们的下载</li></ul></li></ul><h3 id="5-5、本地仓库"><a href="#5-5、本地仓库" class="headerlink" title="5.5、本地仓库"></a>5.5、本地仓库</h3><p>本地仓库/远程仓库</p><p>建立一个本地仓库</p><h3 id="5-6、在IDEA中使用Maven"><a href="#5-6、在IDEA中使用Maven" class="headerlink" title="5.6、在IDEA中使用Maven"></a>5.6、在IDEA中使用Maven</h3><h3 id="5-7、创建一个普通的Maven项目"><a href="#5-7、创建一个普通的Maven项目" class="headerlink" title="5.7、创建一个普通的Maven项目"></a>5.7、创建一个普通的Maven项目</h3><h3 id="5-8、在IDEA中标记文件夹"><a href="#5-8、在IDEA中标记文件夹" class="headerlink" title="5.8、在IDEA中标记文件夹"></a>5.8、在IDEA中标记文件夹</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-07_16-11-58.png"></p><h3 id="5-9、在IDEA中配置Tomcat"><a href="#5-9、在IDEA中配置Tomcat" class="headerlink" title="5.9、在IDEA中配置Tomcat"></a>5.9、在IDEA中配置Tomcat</h3><h3 id="5-10、pom文件"><a href="#5-10、pom文件" class="headerlink" title="5.10、pom文件"></a>5.10、pom文件</h3><p>Maven的高级之处在于，他会帮你导入这个jar包所依赖的其他jar包</p><p>Maven由于他的约定大于配置，我们之后可能会遇到我们写的配置文件无法导出或生效的问题</p><h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><p>Servlet接口在Sun公司有两个默认的实现类：HttpServlet, GenericServlet</p><h3 id="6-1、Servlet简介"><a href="#6-1、Servlet简介" class="headerlink" title="6.1、Servlet简介"></a>6.1、Servlet简介</h3><ul><li>Servlet是Sun公司开发动态web的一门技术</li><li>Sun在这些API中提供一个接口：Servlet，如果你想开发一个Servlet程序，只需完成两个步骤<ul><li>编写一个类，实现Servlet接口</li><li>把开发好的Java类部署到web服务器中</li></ul></li></ul><p><strong>把实现了Servlet接口的Java程序叫做Servlet</strong></p><h3 id="6-2、HelloServlet"><a href="#6-2、HelloServlet" class="headerlink" title="6.2、HelloServlet"></a>6.2、HelloServlet</h3><h4 id="1、创建一个Maven项目"><a href="#1、创建一个Maven项目" class="headerlink" title="1、创建一个Maven项目"></a>1、创建一个Maven项目</h4><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Module</p><p>这个空的工程就是Maven主工程</p><h4 id="2、关于Maven父子工程的理解"><a href="#2、关于Maven父子工程的理解" class="headerlink" title="2、关于Maven父子工程的理解"></a>2、关于Maven父子工程的理解</h4><p>父项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>javaweb_01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目中有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dogegg<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父项目的Java子项目可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure><h4 id="3、Maven环境优化"><a href="#3、Maven环境优化" class="headerlink" title="3、Maven环境优化"></a>3、Maven环境优化</h4><h4 id="4、编写一个Servlet程序"><a href="#4、编写一个Servlet程序" class="headerlink" title="4、编写一个Servlet程序"></a>4、编写一个Servlet程序</h4><ol><li><p>编写一个普通类</p></li><li><p>实现Servlet接口，这里我们直接继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line"></span><br><span class="line">        writer.println(<span class="string">&quot;HelloServlet&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="5、编写Servlet的映射"><a href="#5、编写Servlet的映射" class="headerlink" title="5、编写Servlet的映射"></a>5、编写Servlet的映射</h4><p>为什么需要映射：我们编写的是Java程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要在web服务器中注册我们写的Servlet，还需要给它一个浏览器能访问的路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.dogegg.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6、配置Tomcat"><a href="#6、配置Tomcat" class="headerlink" title="6、配置Tomcat"></a>6、配置Tomcat</h4><h4 id="7、启动测试"><a href="#7、启动测试" class="headerlink" title="7、启动测试"></a>7、启动测试</h4><h3 id="6-3、运行原理"><a href="#6-3、运行原理" class="headerlink" title="6.3、运行原理"></a>6.3、运行原理</h3><p>Servlet是由web服务器调用，web服务器在收到浏览器请求之后，会：</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-08_15-41-58.png"></p><h3 id="6-4、Mapping的问题"><a href="#6-4、Mapping的问题" class="headerlink" title="6.4、Mapping的问题"></a>6.4、Mapping的问题</h3><ol><li><p>一个Servlet请求可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一个serv可以指定通用映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>默认请求路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>指定一些后缀或前缀等等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.a<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>优先级问题</p><p>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求</p></li></ol><h3 id="6-5、ServletContext"><a href="#6-5、ServletContext" class="headerlink" title="6.5、ServletContext"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用</p><h4 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另一个Servlet中拿到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">    String userName = <span class="string">&quot;dogegg&quot;</span>;</span><br><span class="line">    context.setAttribute(<span class="string">&quot;username&quot;</span>, userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    String username = (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">&quot;name:&quot;</span> + username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.dogegg.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getContext<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.dogegg.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getContext<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/gc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、获取初始化参数"><a href="#2、获取初始化参数" class="headerlink" title="2、获取初始化参数"></a>2、获取初始化参数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>www.baidu.com<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    resp.getWriter().println(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">//        System.out.println(&quot;i am ok&quot;);</span></span><br><span class="line">    RequestDispatcher dispatcher = context.getRequestDispatcher(<span class="string">&quot;/gc&quot;</span>);<span class="comment">//转发的请求路径</span></span><br><span class="line">    dispatcher.forward(req, resp);<span class="comment">//调用forward实现请求转发</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-09_09-28-45.png"></p><h4 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h4><p>思路：需要一个文件流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    InputStream is = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    prop.load(is);</span><br><span class="line">    String username = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    resp.getWriter().println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>访问测试即可</p><h3 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的Http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象和一个代表响应的HttpServletResponse对象</p><ul><li>如果要获取客户端请求过来的参数：HttpServletRequest</li><li>如果要给客户端响应一些信息：HttpServletResponse</li></ul><h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><ul><li>负责向浏览器发送数据的方法</li><li>负责向浏览器发送响应头的方法</li><li>响应的状态码</li></ul><h4 id="2、常见应用"><a href="#2、常见应用" class="headerlink" title="2、常见应用"></a>2、常见应用</h4><h5 id="1、向浏览器输出消息"><a href="#1、向浏览器输出消息" class="headerlink" title="1、向浏览器输出消息"></a>1、向浏览器输出消息</h5><h5 id="2、下载文件"><a href="#2、下载文件" class="headerlink" title="2、下载文件"></a>2、下载文件</h5><ol><li>要获取下载文件的路径</li><li>下载的文件名是啥</li><li>设置想办法让浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream对象流写入到buffer缓冲区，使用OutputStream将缓冲区中的数据输出到客户端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 要获取下载文件的路径</span></span><br><span class="line">String path = <span class="string">&quot;C:\\Users\\24524\\Desktop\\java-servlet\\HttpResponse\\target\\HttpResponse\\WEB-INF\\classes\\背景.png&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;下载的文件路径：&quot;</span> + path);</span><br><span class="line"><span class="comment">//2. 下载的文件名是啥</span></span><br><span class="line">String fileName = path.substring(path.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西</span></span><br><span class="line">resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(fileName, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"><span class="comment">//4. 获取下载文件的输入流</span></span><br><span class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line"><span class="comment">//5. 创建缓冲区</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">//6. 获取OutputStream对象</span></span><br><span class="line">ServletOutputStream out = resp.getOutputStream();</span><br><span class="line"><span class="comment">//7. 将FileOutputStream对象流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端</span></span><br><span class="line"><span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><h5 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h5><p>验证码怎么来的？</p><ul><li>前端实现</li><li>后端实现，需要Java的图片类，生成一个图片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//如何让浏览器5秒刷新一次</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">    BufferedImage img = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>, <span class="number">20</span>, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">    <span class="comment">//得到图片</span></span><br><span class="line">    Graphics2D graphics = (Graphics2D) img.getGraphics();<span class="comment">//笔</span></span><br><span class="line">    graphics.setColor(Color.cyan);</span><br><span class="line">    graphics.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="comment">//给图片写数据</span></span><br><span class="line">    graphics.setColor(Color.YELLOW);</span><br><span class="line">    graphics.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">    graphics.drawString(makeNum(), <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//告诉浏览器这个请求用图片的方式打开</span></span><br><span class="line">    resp.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    <span class="comment">//网站存在缓存</span></span><br><span class="line">    resp.setDateHeader(<span class="string">&quot;expires&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">    resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    resp.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片写给浏览器</span></span><br><span class="line">    ImageIO.write(img, <span class="string">&quot;png&quot;</span>, resp.getOutputStream());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">makeNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (((Math.random() * <span class="number">9</span>) + <span class="number">1</span>) * <span class="number">100000</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h5><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-09_14-18-38.png"></p><p>一个web资源收到客户端请求后，它会通知客户端访问另外一个web资源，这个过程叫重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/h/is&quot;</span>);<span class="comment">//重定向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见场景</p><ul><li>用户登录</li></ul><p>面试题：请你聊聊重定向和转发的区别</p><ul><li>相同点<ul><li>页面都会实现跳转</li></ul></li><li>不同点<ul><li>请求转发的时候，URL不会发生变化</li><li>重定向的时候，URL会发生变化</li></ul></li></ul><h3 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http访问服务器，Http请求中的所有信息会被封装到HttpServletRequest。通过HttpServletRequest对象的方法，获得客户端的所有信息。</p><h5 id="获取前端传递的参数-请求转发"><a href="#获取前端传递的参数-请求转发" class="headerlink" title="获取前端传递的参数,请求转发"></a>获取前端传递的参数,请求转发</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    System.out.println(username + <span class="string">&quot;:&quot;</span> + password);</span><br><span class="line">    System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/Success.jsp&quot;</span>).forward(req, resp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试题：请你聊聊重定向和转发的区别</p><ul><li>相同点<ul><li>页面都会实现跳转</li></ul></li><li>不同点<ul><li>请求转发的时候，URL不会发生变化：307</li><li>重定向的时候，URL会发生变化：302</li></ul></li></ul><h2 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h2><h3 id="7-1、会话"><a href="#7-1、会话" class="headerlink" title="7.1、会话"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器</p><p><strong>有状态会话</strong>：一个同学来过教室，下次再来，我们知道这个同学曾经来过</p><p><strong>一个网站，怎么证明你来过？</strong></p><p>客户端        服务端</p><ol><li>服务端给客户端一个信件，客户端下次访问服务端带着信件即可</li><li>服务器登记你来过了，下次你来的时候匹配你</li></ol><h3 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h3><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><ul><li>客户端技术（响应，请求）</li></ul><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息</li></ul><p>常见场景：网站登录后，下一次不用再登录</p><h3 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-10_10-27-41.png"></p><ol><li>从请求中拿到cookie信息</li><li>服务器响应给客户端cookie</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line"></span><br><span class="line">    Cookie[] cookies = req.getCookies();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cookies.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        out.println(<span class="string">&quot;The last time you visit our website is:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;time&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">long</span> l = Long.parseLong(cookie.getValue());</span><br><span class="line">                Date date = <span class="keyword">new</span> Date(l);</span><br><span class="line">                out.println(date);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out.println(<span class="string">&quot;This is your first time to visit our website&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;time&quot;</span>, System.currentTimeMillis() + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cookie一般会保存在本地中</p><p><strong>一个网站cookie是否存在上限</strong></p><ul><li>一个Cookie只能保存一个信息</li><li>一个web站点可以给浏览器发送多个cookie，最多放20个</li><li>300个cookie浏览器上限</li><li>cookie大小有限制</li></ul><p><strong>删除cookie</strong></p><ul><li>不设置有效期，关闭浏览器，自动失效</li><li>设置有效期，时间为0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;time&quot;</span>, System.currentTimeMillis() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4、Session（重点）"><a href="#7-4、Session（重点）" class="headerlink" title="7.4、Session（重点）"></a>7.4、Session（重点）</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-10_10-30-02.png"></p><p>什么是Session</p><ul><li>服务器会给每个用户创建一个Session对象</li><li>一个session独占一个浏览器，只要浏览器没有关闭，这个session就存在</li><li>用户登陆之后，整个网站都可以访问了-&gt;保存用户信息</li></ul><p>session和cookie的区别</p><ul><li>cookie是把用户的数据写给用户的浏览器，浏览器保存</li><li>session把用户的数据写到用户独占session中，服务器端保存</li><li>session对象由服务器创建</li></ul><p>使用场景：</p><ul><li>保存一个登录用户的信息</li><li>购物车信息</li><li>在整个网站中，经常会使用的数据保存在session</li></ul><p>会话自动过期：web.xml中设置</p><h2 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h2><h3 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h3><p>Java Server Pages：Java服务端页面，也和Servlet一样，用于开发动态web</p><p>最大的特点：</p><ul><li>写JSP就像在写HTML</li><li>区别：<ul><li>HTML只给用户提供静态的数据</li><li>JSP页面可以嵌入代码，为用户提供动态数据</li></ul></li></ul><h3 id="8-2、JSP原理"><a href="#8-2、JSP原理" class="headerlink" title="8.2、JSP原理"></a>8.2、JSP原理</h3><ul><li><p>代码层面没有问题</p></li><li><p>服务器内部工作</p><p>Tomcat中有一个work目录</p><p>IDEA中使用Tomcat的会在IDEA的Tomcat中生成一个work目录</p><p>发现页面变成了Java</p></li></ul><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet</strong></p><p>JSP最终会转成Java类</p><p><strong>JSP本质上就是一个Servlet</strong></p><ol><li>判断请求</li><li>内置一些对象</li><li>输出页面前增加的代码</li><li>以上的这些个对象都可以在JSP页面中直接使用</li></ol><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-10_20-29-58.png"></p><p>在JSP页面中，只要是Java代码，就会原封不动地输出</p><p>如果是HTML代码，就会被转换为<code>out.write();</code>这样的格式输出到前端</p><h3 id="8-3、JSP基础语法"><a href="#8-3、JSP基础语法" class="headerlink" title="8.3、JSP基础语法"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，Java中有。JSP作为Java技术的一种应用，它拥有一些自己扩充的语法</p><h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a><strong>JSP表达式</strong></h4><p>作用：将程序的输出，输出到客户端</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP脚本片段"><a href="#JSP脚本片段" class="headerlink" title="JSP脚本片段"></a><strong>JSP脚本片段</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    num += i;</span><br><span class="line">&#125;</span><br><span class="line">out.println(<span class="string">&quot;&lt;h3&gt;Num=&quot;</span> + num + <span class="string">&quot;&lt;/h3&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="脚本片段的再实现"><a href="#脚本片段的再实现" class="headerlink" title="脚本片段的再实现"></a><strong>脚本片段的再实现</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;p&gt;&lt;%=i%&gt;&lt;/p&gt;</span><br><span class="line">&lt;%</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>JSP声明：会被编译到JSP生成的Java类中，其他的会被生成到_jspService类中</p><p>在JSP中，嵌入Java代码即可</p><p>JSP的注释不会再客户端显示，但可以看到HTML注释</p><h3 id="8-4、JSP指令"><a href="#8-4、JSP指令" class="headerlink" title="8.4、JSP指令"></a>8.4、JSP指令</h3><h3 id="8-5、9大内置对象"><a href="#8-5、9大内置对象" class="headerlink" title="8.5、9大内置对象"></a>8.5、9大内置对象</h3><ul><li>PageContext 存东西</li><li>Request 存东西</li><li>Response</li><li>Session 存东西</li><li>Application [ServletContext] 存东西</li><li>config [ServletConfig]</li><li>out</li><li>page 几乎不用</li><li>exception</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;1&quot;</span>);<span class="comment">//数据只在一个页面有效</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;2&quot;</span>);<span class="comment">//数据只在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;3&quot;</span>);<span class="comment">//数据只在一次服务器中有效，从打开服务器到关闭服务器</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;4&quot;</span>);<span class="comment">//数据只在一次请求中有效，请求转发会携带这个数据</span></span><br></pre></td></tr></table></figure><p>request：客户端向服务器发送请求，产生的数据用户看完就没用了</p><p>session：客户端向服务器发送请求，产生的数据用户用完还有用</p><p>application：客户端向服务器发送请求，产生的数据用户用完了，其他用户还可以用</p><h3 id="8-6、JSP标签、JSTL标签、EL表达式"><a href="#8-6、JSP标签、JSTL标签、EL表达式" class="headerlink" title="8.6、JSP标签、JSTL标签、EL表达式"></a>8.6、JSP标签、JSTL标签、EL表达式</h3><p>EL表达式：${}</p><ul><li>获取数据</li><li>执行运算</li><li>获取web开发的常用对象</li></ul><p>JSP标签</p><p>JSTL</p><p><strong>JSTL标签库的使用就是为了弥补HTML标签的不足</strong>：它自定了许多标签，可供我们使用，标签的功能和Java一样</p><ul><li>核心标签</li><li>格式化标签</li><li>SQL标签</li><li>XML标签</li></ul><p><strong>JSTL标签库使用步骤</strong></p><ol><li>引入对应的taglib</li><li>使用其中的方法</li><li>在Tomcat需要引入jstl的包，否则可能会报错</li></ol><h2 id="9、JavaBean"><a href="#9、JavaBean" class="headerlink" title="9、JavaBean"></a>9、JavaBean</h2><p>实体类</p><p>JavaBean有特定的写法</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有相应的封装</li></ul><p>一般用来和数据库的字段做映射 ORM</p><p>ORM：对象关系映射</p><ul><li>表——类</li><li>字段——属性</li><li>行记录——对象</li></ul><h2 id="10、MVC三层结构"><a href="#10、MVC三层结构" class="headerlink" title="10、MVC三层结构"></a>10、MVC三层结构</h2><p>什么是MVC：Model View Controller 模型、视图、控制器</p><h3 id="10-1、早些年"><a href="#10-1、早些年" class="headerlink" title="10.1、早些年"></a>10.1、早些年</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-12_09-51-25.png"></p><p>用户直接访问控制层，控制层就可以直接操作数据库</p><p>弊端：程序十分臃肿，不利于维护</p><h3 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-12_09-59-29.png"></p><p>Model</p><ul><li>业务处理：业务逻辑（Service）</li><li>数据持久层：CRUD（DAO）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求</li></ul><p>Controller（Servlet）</p><ul><li>接收用户的请求：request</li><li>交给业务层处理对应的代码</li><li>控制视图的跳转</li></ul><h2 id="11、Filter"><a href="#11、Filter" class="headerlink" title="11、Filter"></a>11、Filter</h2><p>Filter：过滤器，用来过滤网站的数据</p><ul><li>处理中文乱码</li><li>登录验证</li></ul><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-12_10-52-29.png"></p><ol><li><p>导包</p></li><li><p>编写过滤器</p><ol><li>导包不要错</li><li>实现Filter接口，重写对应的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Program start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        System.out.println(&quot;before&quot;);</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">        <span class="comment">//        System.out.println(&quot;after&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Program destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在xml中配置过滤器</li></ol></li></ol><h2 id="12、Listener"><a href="#12、Listener" class="headerlink" title="12、Listener"></a>12、Listener</h2><p>实现一个监听器的接口</p><ol><li>编写一个监听器</li><li>配置监听器</li><li>看情况是否使用</li></ol><h2 id="13、过滤器、监听器的常见应用"><a href="#13、过滤器、监听器的常见应用" class="headerlink" title="13、过滤器、监听器的常见应用"></a>13、过滤器、监听器的常见应用</h2><p>监听器：GUI编程中经常使用</p><p>用户登录之后才能进入主页，用户注销后就不能进入主页了</p><ol><li><p>用户登录后，向Session中放入用户的数据</p></li><li><p>进入主页的时候要判断用户是否已经登录，要求：在过滤器中实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">    HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">    Object session = request.getSession().getAttribute(String.valueOf(Constant.USER_SESSION));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (session == <span class="keyword">null</span>) &#123;</span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/ERROR.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="14、JDBC回顾"><a href="#14、JDBC回顾" class="headerlink" title="14、JDBC回顾"></a>14、JDBC回顾</h2><p>什么是JDBC：Java连接数据库</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-12_20-29-01.png"></p><p>需要jar包的支持：</p><ul><li>java.sql</li><li>javax.sql</li><li>mysql-xxxxx</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://rm-bp1s254s2y20o03736o.mysql.rds.aliyuncs.com:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    String username = <span class="string">&quot;dogegg&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;zxia09ZTC!@&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">    Statement statement = connection.createStatement();</span><br><span class="line">    String sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line">    ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id=&quot;</span> + resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + resultSet.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;password=&quot;</span> + resultSet.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;email=&quot;</span> + resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;birthday=&quot;</span> + resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resultSet.close();</span><br><span class="line">    statement.close();</span><br><span class="line">    connection.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDBC固定步骤</p><ol><li>加载驱动</li><li>连接数据库</li><li>向数据库发送SQL对象</li><li>编写SQL语句</li><li>执行SQL</li><li>关闭连接</li></ol><h2 id="15、JDBC事务"><a href="#15、JDBC事务" class="headerlink" title="15、JDBC事务"></a>15、JDBC事务</h2><p>要么都成功，要么都失败</p><p>ACID：保证数据的安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交</span><br><span class="line">事务回滚</span><br><span class="line">关闭事务</span><br></pre></td></tr></table></figure><p><strong>Junit单元测试</strong></p><p>简单使用</p><p>@Test注解只在方法上有效，只要方法加了这个注解，就可以直接运行</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM入门</title>
      <link href="2021/08/04/jvm-ru-men/"/>
      <url>2021/08/04/jvm-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM探究"><a href="#JVM探究" class="headerlink" title="JVM探究"></a>JVM探究</h1><ul><li>对JVM的理解？java8虚拟机和之前的变化？</li><li>什么是OOM，什么事栈溢出StackOverFlowError？怎么分析？</li><li>JVM的常用调优参数有哪些？</li><li>内存快照如何抓取，怎么分析Dump文件？</li><li>JVM中，类加载器的认识？</li></ul><h2 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h2><p>硬件体系-&gt;操作系统-&gt;JVM</p><h2 id="JVM的体系结构"><a href="#JVM的体系结构" class="headerlink" title="JVM的体系结构"></a>JVM的体系结构</h2><p>.java-&gt;Class File-&gt;类加载器 Class Loader-&gt;运行时数据区(Runtime Data Area)</p><p>{</p><pre><code>* 方法区(Method Area)* Java栈(Stack)* 本地方法栈(Native Method Stack)* 堆(Heap)* 程序计数器</code></pre><p>}</p><p>-&gt;本地方法接口-&gt;本地方法库</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_18-53-33.png"></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>作用：加载Class文件</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_19-10-32.png"></p><ol><li>虚拟机自带的加载器</li><li>启动类（根）加载器</li><li>扩展类加载器</li><li>应用程序加载器</li></ol><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><ol><li>类加载器收到类加载的请求</li><li>将这个请求向上委托给父类加载器去完成，一直向上委托，直到根加载器</li><li>启动类加载器检查是否能够加载当前这个类，如果能加载，就使用当前加载器，否则抛出异常，通知子类加载器加载</li><li>重复步骤3</li></ol><h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><p>Java安全模型的核心就是Java沙箱（sandbox），什么是沙箱？沙箱是一个限制程序运行的环境。沙箱机制就是将Java代码限定在虚拟机（JVM）特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。沙箱<strong>主要限制系统资源访问</strong>，那系统资源包括什么？CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。</p><p>所有的Java程序运行都可以指定沙箱，可以定制安全策略。</p><p>在Java中将执行程序分成本地代码和远程代码两种，本地代码默认视为可信任的，而远程代码则被看作是不受信任的。对于授信的本地代码，可以访问一切本地资源。而对于非授信的远程代码在早期的Java实现中，安全依赖于沙箱机制。如下图所示</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_19-51-25.png" alt="JDK1.0安全模型"></p><p>在后续的Java1.1和1.2版本中，分别加入了“安全策略”“代码签名”。</p><p>当前最新的安全机制实现，则引入域（Domain）的概念。虚拟机会把所有代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域（Protected Domain），对应不一样的权限。存在于不同域中的类文件就具有了当前域的全部权限，如下图所示</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_19-59-22.png" alt="最新的安全模型(JDK1.6)"></p><p>组成沙箱的基本组件：</p><ul><li>字节码校验器（bytecode verifier）：确保Java文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</li><li>类装载器（class loader）：其中类装载器在3个方面对Java沙箱起作用<ul><li>它防止恶意代码去干涉善意的代码</li><li>它守护了被信任的类库边界</li><li>它将代码归入保护域，确定了代码可以进行哪些操作</li></ul></li></ul><p>类装载器采用的机制是双亲委派模式</p><ol><li>从最内层JVM自带类加载器开始加载，外层恶意同名类得不到加载从而无法使用</li><li>由于严格通过包来区分了访问域，外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效</li></ol><ul><li>存取控制器：存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定，可以由用户指定。</li><li>安全管理器：是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。</li><li>安全软件包：java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括：<ul><li>安全提供者</li><li>信息摘要</li><li>数字签名</li><li>加密</li><li>鉴别</li></ul></li></ul><h2 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h2><p>凡是带了native关键字的，说明Java的作用范围到达不了，回去调用底层C语言的库，会进入本地方法栈，调用本地方法本地接口JNI</p><p>JNI作用：扩展Java的使用，融合不同的编程语言为Java所用</p><p>Java在内存区域中专门开辟了一块标记区域：Native Method Stack，登记native方法</p><h2 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h2><p>程序计数器：Program Counter Register</p><p>每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来储存指向一条指令的地址，也即将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间。</p><p><u>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关</u></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>数据结构</p><p>程序 = 数据结构 + 算法</p><p>先进后出，后进先出——类比桶</p><p>队列：先进先出（FIFO: First In First Out）</p><p>栈内存：主管程序的运行，生命周期和线程同步，线程结束，栈内存释放，对于栈来说，<strong>不存在垃圾回收问题</strong></p><p>一旦线程结束，栈就结束</p><p>8大基本类型+对象引用+实例方法 =&gt; 栈内存中</p><p>栈运行原理：栈帧</p><p>栈满了：StackOverflowError</p><p>栈+堆+方法区：交互关系</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_21-13-12.png"></p><h2 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h2><ul><li>Sun——HotSpot</li><li>BEA——JRokit</li><li>IBM——J9VM</li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>Heap，一个JVM只有一个堆内存，堆内存的大小是可以调节的</p><p>类加载器读取了类文件后，一般会把什么东西放到堆中？类，方法，常量，变量……保存我们所有引用类型的真实对象</p><p>堆内存中细分为三个区域：</p><ul><li>新生区（伊甸园区）</li><li>老年区</li><li>永久区</li></ul><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_21-26-22.png"></p><p>GC垃圾回收，主要是在伊甸园区和养老区</p><p>假设内存满了，OOM（OutOfMemory），堆内存不够</p><p>在JDK8以后，永久存储区改了个名字：元空间</p><h3 id="新生区"><a href="#新生区" class="headerlink" title="新生区"></a>新生区</h3><ul><li>类：诞生和成长的地方，甚至死亡</li><li>伊甸园：所有对象都是在伊甸园区new出来的</li><li>幸存者（0,1）</li></ul><h3 id="老年区"><a href="#老年区" class="headerlink" title="老年区"></a>老年区</h3><h3 id="永久区"><a href="#永久区" class="headerlink" title="永久区"></a>永久区</h3><p>这个区域常驻内存，用来存放JDK自带的Class对象、Interface元数据，存储的是Java运行时的一些环境或类信息，这个区域<strong>不存在垃圾回收</strong>。关闭JVM会释放这个区域的内存</p><ul><li>JDK1.6之前：永久代，常量池是在方法区中</li><li>JDK1.7，永久代，但是慢慢地退化了，<code>去永久代</code>，常量池在堆中</li><li>JDK1.8之后，无永久代，常量池在元空间</li></ul><p>经过研究，99%的对象都是临时对象</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_19-23-08.png"></p><p>元空间：逻辑上存在，物理上不存在</p><p>在一个项目中，突然出现了OOM故障，那么如何排除？</p><ul><li>能够看到第几行出错：内存快照分析工具，MAT、JProfiler</li><li>Debug，一行行代码分析</li></ul><p>MAT、JProfiler作用：</p><ul><li>分析Dump文件，快速定位内存泄漏</li><li>获得堆中的数据</li><li>获得大的对象</li></ul><h2 id="堆内存调优"><a href="#堆内存调优" class="headerlink" title="堆内存调优"></a>堆内存调优</h2><p>OOM：1. 尝试扩大堆内存看结果 2. 分析内存，看哪个地方出现了问题</p><h2 id="JProfiler"><a href="#JProfiler" class="headerlink" title="JProfiler"></a>JProfiler</h2><p>查看堆错误</p><h2 id="GC：垃圾回收"><a href="#GC：垃圾回收" class="headerlink" title="GC：垃圾回收"></a>GC：垃圾回收</h2><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-25-25.png"></p><p>JVM在进行GC时，并不是对这三个区域统一回收，大部分时候，回收都是新生代</p><ul><li>新生代</li><li>幸存区（from， to）</li><li>老年区</li></ul><p>GC两种类型：轻GC（普通GC）、重GC（全局GC）</p><p>GC题目：</p><ul><li>JVM的内存模型和分区 详细到每个区放什么</li><li>堆里面的分区有哪些？Eden， from， to， 老年区，说说特点</li><li>GC算法有哪些？标记清除法，标记压缩，复制算法，引用计数器</li><li>轻GC和重GC分别在什么时候发生？</li></ul><h2 id="GC常用算法"><a href="#GC常用算法" class="headerlink" title="GC常用算法"></a>GC常用算法</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-33-13.png" alt="引用计数法"></p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-42-09.png" alt="复制算法"></p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-46-44.png"></p><ul><li>好处：没有内存的碎片</li><li>坏处：浪费了内存空间，多了一半空间永远是空的。假设对象100%存活（极端情况）</li></ul><p>复制算法最佳使用场景：对象存活度较低的时候：新生区</p><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-55-22.png" alt="标记清除算法"></p><ul><li>优点：不需要额外的空间</li><li>缺点：两次扫描，严重浪费时间，会产生内存碎片</li></ul><h3 id="标记压缩"><a href="#标记压缩" class="headerlink" title="标记压缩"></a>标记压缩</h3><p>再优化</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-58-35.png" alt="标记压缩"></p><h3 id="标记清除压缩"><a href="#标记清除压缩" class="headerlink" title="标记清除压缩"></a>标记清除压缩</h3><p>先标记清除几次，再压缩</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>内存效率：复制算法&gt;标记清除算法&gt;标记压缩算法（时间复杂度）</p><p>内存整齐度：复制算法=标记压缩算法&gt;标记清除算法</p><p>内存利用率：标记压缩算法=标记清除算法&gt;复制算法</p><p>思考：有无更优算法？</p><p>答案：没有最好的算法，只有最合适的——&gt;GC：分代收集算法</p><p>年轻代：</p><ul><li>存活率低</li><li>复制算法</li></ul><p>老年代：</p><ul><li>区域大：存活率高</li><li>标记清除（内存碎片不是太多）+标记压缩混合实现</li></ul><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><ol><li><p>什么是JMM？</p><p>JMM：Java Memory Model</p></li><li><p>干什么的？</p><p>官方、博客、视频</p><p>作用：缓存一致性协议，用于定义数据读写的规则</p><p>JMM定义了线程工作内存和主内存之间的抽象关系：线程之间的共享变量储存在主内存中，每个线程都有一个私有的本地内存</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_21-14-11.png"></p><p>解决共享对象可见性的问题：volilate</p></li><li><p>它该如何学习？</p><p>JMM：抽象的概念，理论</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GUI编程</title>
      <link href="2021/07/31/gui-bian-cheng/"/>
      <url>2021/07/31/gui-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>GUI的核心技术：Swing  AWT</p><ol><li>界面不美观</li><li>需要JRE环境</li></ol><p>为什么要学习？</p><ol><li>可以写出自己心中想要的小工具</li><li>工作时，可能要维护Swing界面</li><li>了解MVC架构，了解监听</li></ol><h3 id="2、AWT"><a href="#2、AWT" class="headerlink" title="2、AWT"></a>2、AWT</h3><h4 id="2-1、AWT介绍"><a href="#2-1、AWT介绍" class="headerlink" title="2.1、AWT介绍"></a>2.1、AWT介绍</h4><ol><li>包含了很多的类和接口</li></ol><p>GUI：图形用户界面编程</p><ol start="2"><li>元素：窗口，按钮，文本框</li><li>java.awt</li></ol><h4 id="2-2、组件和容器"><a href="#2-2、组件和容器" class="headerlink" title="2.2、组件和容器"></a>2.2、组件和容器</h4><h5 id="1、Frame"><a href="#1、Frame" class="headerlink" title="1、Frame"></a>1、Frame</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;我的第一个java图形界面窗口&quot;</span>);</span><br><span class="line">    <span class="comment">//设置可见性</span></span><br><span class="line">    frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    frame.setSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">    frame.setBackground(<span class="keyword">new</span> Color(<span class="number">123</span>, <span class="number">45</span>, <span class="number">243</span>));</span><br><span class="line">    frame.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">    frame.setResizable(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：窗口关闭不掉</p><h5 id="2、Panel"><a href="#2、Panel" class="headerlink" title="2、Panel"></a>2、Panel</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">    Panel panel = <span class="keyword">new</span> Panel();</span><br><span class="line">    frame.setLayout(<span class="keyword">null</span>);</span><br><span class="line">    frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">    frame.setBackground(<span class="keyword">new</span> Color(<span class="number">40</span>,<span class="number">161</span>,<span class="number">35</span>));</span><br><span class="line">    panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">    panel.setBackground(<span class="keyword">new</span> Color(<span class="number">193</span>,<span class="number">15</span>,<span class="number">60</span>));</span><br><span class="line">    frame.add(panel);</span><br><span class="line">    frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决了窗口关闭问题</p><h5 id="3、布局管理器"><a href="#3、布局管理器" class="headerlink" title="3、布局管理器"></a>3、布局管理器</h5><ul><li>流式布局</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">    Button button1 = <span class="keyword">new</span> Button(<span class="string">&quot;button1&quot;</span>);</span><br><span class="line">    Button button2 = <span class="keyword">new</span> Button(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">    Button button3 = <span class="keyword">new</span> Button(<span class="string">&quot;button3&quot;</span>);</span><br><span class="line">    frame.setLayout(<span class="keyword">new</span> FlowLayout(FlowLayout.LEFT));</span><br><span class="line">    frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    frame.add(button1);</span><br><span class="line">    frame.add(button2);</span><br><span class="line">    frame.add(button3);</span><br><span class="line">    frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>东西南北中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Frame testBorderLayout = <span class="keyword">new</span> Frame(<span class="string">&quot;TestBorderLayout&quot;</span>);</span><br><span class="line">    Button east = <span class="keyword">new</span> Button(<span class="string">&quot;East&quot;</span>);</span><br><span class="line">    Button west = <span class="keyword">new</span> Button(<span class="string">&quot;West&quot;</span>);</span><br><span class="line">    Button center = <span class="keyword">new</span> Button(<span class="string">&quot;Center&quot;</span>);</span><br><span class="line">    Button north = <span class="keyword">new</span> Button(<span class="string">&quot;North&quot;</span>);</span><br><span class="line">    Button south = <span class="keyword">new</span> Button(<span class="string">&quot;South&quot;</span>);</span><br><span class="line">    testBorderLayout.add(east,BorderLayout.EAST);</span><br><span class="line">    testBorderLayout.add(west,BorderLayout.WEST);</span><br><span class="line">    testBorderLayout.add(north,BorderLayout.NORTH);</span><br><span class="line">    testBorderLayout.add(south,BorderLayout.SOUTH);</span><br><span class="line">    testBorderLayout.add(center,BorderLayout.CENTER);</span><br><span class="line">    testBorderLayout.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">    testBorderLayout.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表格布局</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;TestGridLayout&quot;</span>);</span><br><span class="line">    Button b1 = <span class="keyword">new</span> Button(<span class="string">&quot;b1&quot;</span>);</span><br><span class="line">    Button b2 = <span class="keyword">new</span> Button(<span class="string">&quot;b2&quot;</span>);</span><br><span class="line">    Button b3 = <span class="keyword">new</span> Button(<span class="string">&quot;b3&quot;</span>);</span><br><span class="line">    Button b4 = <span class="keyword">new</span> Button(<span class="string">&quot;b4&quot;</span>);</span><br><span class="line">    Button b5 = <span class="keyword">new</span> Button(<span class="string">&quot;b5&quot;</span>);</span><br><span class="line">    Button b6 = <span class="keyword">new</span> Button(<span class="string">&quot;b6&quot;</span>);</span><br><span class="line">    frame.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">    frame.add(b1);</span><br><span class="line">    frame.add(b2);</span><br><span class="line">    frame.add(b3);</span><br><span class="line">    frame.add(b4);</span><br><span class="line">    frame.add(b5);</span><br><span class="line">    frame.add(b6);</span><br><span class="line">    frame.pack();</span><br><span class="line">    frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、事件监听"><a href="#4、事件监听" class="headerlink" title="4、事件监听"></a>4、事件监听</h5><p>当某个事情发生的时候，该干什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dogegg.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActionEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按下按钮，触发事件</span></span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        Button button = <span class="keyword">new</span> Button();</span><br><span class="line"></span><br><span class="line">        MyActionListener myActionListener = <span class="keyword">new</span> MyActionListener();</span><br><span class="line">        button.addActionListener(myActionListener);</span><br><span class="line"></span><br><span class="line">        frame.add(button,BorderLayout.CENTER);</span><br><span class="line">        frame.pack();</span><br><span class="line">        windowCLose(frame);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">windowCLose</span><span class="params">(Frame frame)</span> </span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、输入框TextField监听"><a href="#5、输入框TextField监听" class="headerlink" title="5、输入框TextField监听"></a>5、输入框TextField监听</h5><h5 id="6、画笔"><a href="#6、画笔" class="headerlink" title="6、画笔"></a>6、画笔</h5><h5 id="7、鼠标监听"><a href="#7、鼠标监听" class="headerlink" title="7、鼠标监听"></a>7、鼠标监听</h5><h5 id="8、窗口监听-WindowListener"><a href="#8、窗口监听-WindowListener" class="headerlink" title="8、窗口监听 WindowListener"></a>8、窗口监听 WindowListener</h5><h5 id="9、键盘监听"><a href="#9、键盘监听" class="headerlink" title="9、键盘监听"></a>9、键盘监听</h5><h3 id="3、Swing"><a href="#3、Swing" class="headerlink" title="3、Swing"></a>3、Swing</h3><h5 id="1、窗口"><a href="#1、窗口" class="headerlink" title="1、窗口"></a>1、窗口</h5><h5 id="2、弹窗"><a href="#2、弹窗" class="headerlink" title="2、弹窗"></a>2、弹窗</h5><h5 id="3、标签"><a href="#3、标签" class="headerlink" title="3、标签"></a>3、标签</h5><p>label</p><h5 id="4、面板"><a href="#4、面板" class="headerlink" title="4、面板"></a>4、面板</h5><p>JPanel</p><p>JScrollPanel</p><h5 id="5、按钮"><a href="#5、按钮" class="headerlink" title="5、按钮"></a>5、按钮</h5><ul><li>单选按钮</li><li>复选按钮</li></ul><h5 id="6、列表"><a href="#6、列表" class="headerlink" title="6、列表"></a>6、列表</h5><h5 id="7、文本框"><a href="#7、文本框" class="headerlink" title="7、文本框"></a>7、文本框</h5><ul><li>文本框</li><li>密码框</li><li>文本域</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="2021/07/31/jdbc/"/>
      <url>2021/07/31/jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC（重点）"><a href="#JDBC（重点）" class="headerlink" title="JDBC（重点）"></a>JDBC（重点）</h2><h3 id="1、数据库驱动"><a href="#1、数据库驱动" class="headerlink" title="1、数据库驱动"></a>1、数据库驱动</h3><p>程序会通过数据库驱动，和数据库打交道</p><h3 id="2、JDBC"><a href="#2、JDBC" class="headerlink" title="2、JDBC"></a>2、JDBC</h3><p>SUN公司为了简化操作，提供了Java操作数据库的规范</p><p>对于开发人员，只需掌握操作即可</p><h3 id="3、第一个JDBC程序"><a href="#3、第一个JDBC程序" class="headerlink" title="3、第一个JDBC程序"></a>3、第一个JDBC程序</h3><blockquote><p>创建测试数据库</p></blockquote><p>1、创建普通项目</p><p>2、导入数据库驱动</p><p>3、编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;XXXX文件位置&quot;</span>);</span><br><span class="line"><span class="comment">//用户信息和url</span></span><br><span class="line">String url = <span class="string">&quot;jdbc:mysql://xxxx:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8&amp;useSS:=true&quot;</span>;</span><br><span class="line">String userName = xx;</span><br><span class="line">String password = xx;</span><br><span class="line"><span class="comment">//连接成功，connection代表数据库对象</span></span><br><span class="line">Connection connection = DriverManager.getConnection(url, userName, password);</span><br><span class="line"><span class="comment">//执行SQL的对象</span></span><br><span class="line">Statement statement = connection.createStatement();</span><br><span class="line"><span class="comment">//执行SQL的对象去执行SQL，可能存在结果，查看返回结果</span></span><br><span class="line">String sql = <span class="string">&quot;select xxx&quot;</span>;</span><br><span class="line">ResultSet result = statement.executeQuery(sql);<span class="comment">//结果集封装了查询结果</span></span><br><span class="line"><span class="keyword">while</span> (result.next()) &#123;</span><br><span class="line">    System.out.println(result.getObject(<span class="string">&quot;xx&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放连接</span></span><br><span class="line">result.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h3 id="4、SQL注入问题"><a href="#4、SQL注入问题" class="headerlink" title="4、SQL注入问题"></a>4、SQL注入问题</h3><h3 id="5、PreparedStatement对象"><a href="#5、PreparedStatement对象" class="headerlink" title="5、PreparedStatement对象"></a>5、PreparedStatement对象</h3><p>可防止SQL注入，并且效率更高</p><h3 id="6、事务"><a href="#6、事务" class="headerlink" title="6、事务"></a>6、事务</h3><blockquote><p>ACID原则</p></blockquote><p>原子性：要么全部完成，要么都不完成</p><p>一致性：总数不变</p><p><strong>隔离性：多个进程互不干扰</strong></p><p>持久性：一旦提交不可逆，持久化到数据库</p><p>隔离性的问题：</p><p>脏读：一个事务读取了另一个没有提交的事务</p><p>不可重复读：同一个事务内，重复读取数据，数据发生变化</p><p>虚读（幻读）：一个事务内，读取到别人插入的数据</p><h3 id="7、数据库连接池"><a href="#7、数据库连接池" class="headerlink" title="7、数据库连接池"></a>7、数据库连接池</h3><p>数据库连接——执行完毕——释放</p><p>连接——释放十分浪费系统资源</p><p><strong>池化技术：准备一些预先的资源，连接预先准备好的</strong></p><p>最小连接数</p><p>最大连接数</p><p>等待超时</p><p>编写连接池，实现一个接口DataSource</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库的设计</title>
      <link href="2021/07/31/shu-ju-ku-de-she-ji/"/>
      <url>2021/07/31/shu-ju-ku-de-she-ji/</url>
      
        <content type="html"><![CDATA[<p>分析需求：分析业务和需要处理的数据库的需求</p><p>概要设计：设计关系E-R图</p><h3 id="设计数据库的步骤（以个人博客为例）"><a href="#设计数据库的步骤（以个人博客为例）" class="headerlink" title="设计数据库的步骤（以个人博客为例）"></a>设计数据库的步骤（以个人博客为例）</h3><ol><li>收集信息，分析需求</li></ol><ul><li><p>用户表</p></li><li><p>分类表</p></li><li><p>文章表</p></li><li><p>评论表</p></li><li><p>友链表</p></li></ul><ol start="2"><li>标识实体</li><li>标识实体之间的关系</li></ol><h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><p>为什么需要数据规范化？</p><ul><li>信息重复</li><li>更新异常</li><li>插入异常<ul><li>无法正常显示信息</li></ul></li><li>删除异常<ul><li>丢失有效信息</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><h4 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h4><p>原子性：保证每一列不可再分</p><h4 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h4><p>前提：满足第一范式</p><p>每张表只描述一件事情</p><h4 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h4><p>前提：满足第一范式和第二范式</p><p>表中每一列数据都和主键直接相关，而不能间接相关</p><h4 id="规范性-和-性能的问题"><a href="#规范性-和-性能的问题" class="headerlink" title="规范性 和 性能的问题"></a>规范性 和 性能的问题</h4><p>关联查询的表不得超过三张</p><ul><li>考虑商业化的需求和目标，数据库的性能更加重要</li><li>在规范性能的时候，适当考虑规范性</li><li>故意给某些表增加冗余字段</li><li>故意增加计算列（从大数据量降低为小数据量的查询：索引）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的基本程序设计结构</title>
      <link href="2021/07/28/java-de-ji-ben-cheng-xu-she-ji-jie-gou/"/>
      <url>2021/07/28/java-de-ji-ben-cheng-xu-she-ji-jie-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">or</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>注：<code>/**/</code>注释<strong>不可嵌套</strong></p><h3 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">short</span> <span class="keyword">long</span> <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">float</span> <span class="keyword">double</span></span><br><span class="line"><span class="keyword">char</span></span><br><span class="line"><span class="keyword">boolean</span></span><br></pre></td></tr></table></figure><p><strong>Java中大小写敏感</strong></p><p>逐一声明每一个变量可以提高程序的可读性</p><h3 id="3、枚举类型"><a href="#3、枚举类型" class="headerlink" title="3、枚举类型"></a>3、枚举类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">xxx</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="4、数值类型之间的合法转换"><a href="#4、数值类型之间的合法转换" class="headerlink" title="4、数值类型之间的合法转换"></a>4、数值类型之间的合法转换</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/image-20210731213910316.png"></p><p>实线：无信息丢失的转换</p><p>虚线：可能有精度损失的转换</p><h3 id="5、字符串"><a href="#5、字符串" class="headerlink" title="5、字符串"></a>5、字符串</h3><p>Java没有内置的字符串类型，而是在标准Java类库中提供了一个预定义类——String。每个用双引号括起来的字符串都是String类的实例。</p><p>Java中不能修改字符串中的单个字符，String类对象是“不可变的”</p><blockquote><p>检查一个字符串既不是null也不是空串</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() != <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="构建字符串"><a href="#构建字符串" class="headerlink" title="构建字符串"></a>构建字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"><span class="comment">//每次需要添加一部分内容时，就调用append方法</span></span><br><span class="line">builder.append(<span class="string">&quot;ch&quot;</span>);</span><br><span class="line">builder.append(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串构建完成时，就调用toString方法，得到一个String对象，期中包含了构建器中的字符序列</span></span><br><span class="line">String completedString = builder.toString();</span><br></pre></td></tr></table></figure><p>拼接字符串的效率低，耗时，浪费空间，构建字符串解决了这个问题 </p><h3 id="6、循环"><a href="#6、循环" class="headerlink" title="6、循环"></a>6、循环</h3><p>有一条不成文的规定：for语句的3个部分应该对同一个计数器变量进行初始化、检测和更新。若不遵守这一规则，编写的循环常常晦涩难懂</p><p>在处理多个选项时，使用if/else结构显得有些笨拙。因此可以使用switch语句。</p><p>但如果在case分支语句的末尾没有break语句，那么就会接着执行下一个case语句。这种情况相当危险，常常会引发错误。所以我们在程序中从不使用switch语句。</p><blockquote><p>带标签的break语句</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">label:</span><br><span class="line"><span class="keyword">while</span> (...) &#123; <span class="comment">//this loop statement is tagged with the label</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (...) &#123; <span class="comment">//this inner loop is not labeled</span></span><br><span class="line">        <span class="keyword">if</span> (...) &#123;</span><br><span class="line">            <span class="keyword">break</span> label; <span class="comment">//break out of xxx loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、大数"><a href="#7、大数" class="headerlink" title="7、大数"></a>7、大数</h3><p>java.math包下的类：BigInteger和BigDecimal</p><h3 id="8、数组"><a href="#8、数组" class="headerlink" title="8、数组"></a>8、数组</h3><p><code>Arrays.toString(a);</code>可以打印数组中的所有值</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象三大特性</title>
      <link href="2021/06/01/java-mian-xiang-dui-xiang-san-da-te-xing/"/>
      <url>2021/06/01/java-mian-xiang-dui-xiang-san-da-te-xing/</url>
      
        <content type="html"><![CDATA[<p>转自：<a href="https://www.cnblogs.com/hysum/p/7100874.html">https://www.cnblogs.com/hysum/p/7100874.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanUtils的copyproPerties方法的用法</title>
      <link href="2021/05/30/beanutils-de-copyproperties-fang-fa-de-yong-fa/"/>
      <url>2021/05/30/beanutils-de-copyproperties-fang-fa-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>转载自：<a href="https://www.cnblogs.com/luxianyu-s/p/9719668.html">https://www.cnblogs.com/luxianyu-s/p/9719668.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="2021/05/15/linux-ming-ling/"/>
      <url>2021/05/15/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><ul><li>切换目录：<code>cd 目录名</code></li><li>查看目录：<code>ls -1</code></li></ul><h2 id="压缩包操作"><a href="#压缩包操作" class="headerlink" title="压缩包操作"></a>压缩包操作</h2><ul><li>解压缩tar包：<code>tar -xzvf ../xxx.tar</code></li><li>解压缩zip包：<code>unzip ../xxx.zip</code></li></ul><h2 id="不常用命令"><a href="#不常用命令" class="headerlink" title="不常用命令"></a>不常用命令</h2><ul><li>远程登录云服务器：<code>ssh 用户名@公网IP</code></li><li>上传到云服务器：<code>scp xxx.tar 用户名@公网IP:~/</code></li><li>创建目录：<code>mkdir</code></li></ul><h2 id="运行SpringBoot的命令"><a href="#运行SpringBoot的命令" class="headerlink" title="运行SpringBoot的命令"></a>运行SpringBoot的命令</h2><p><code>mvn clean spring-boot:run</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB配置</title>
      <link href="2021/05/01/mongodb-pei-zhi/"/>
      <url>2021/05/01/mongodb-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y update</span><br><span class="line">sudo yum -y install epel-release</span><br><span class="line">sudo yum -y install docker-io</span><br></pre></td></tr></table></figure><h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo docker version</span><br></pre></td></tr></table></figure><h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull mongo:latest</span><br><span class="line">sudo docker images</span><br><span class="line">sudo docker run -itd --name mongo -p 27017:27017 mongo --auth</span><br><span class="line">sudo docker ps</span><br></pre></td></tr></table></figure><h2 id="创建admin账户"><a href="#创建admin账户" class="headerlink" title="创建admin账户"></a>创建admin账户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it mongo mongo admin</span><br><span class="line">db.createUser(&#123; user:&#39;admin&#39;,pwd:&#39;123456&#39;,roles:[ &#123; role:&#39;root&#39;, db: &#39;admin&#39;&#125;]&#125;);</span><br><span class="line">db.auth(&#39;admin&#39;, &#39;123456&#39;)</span><br></pre></td></tr></table></figure><h2 id="创建数据库实例"><a href="#创建数据库实例" class="headerlink" title="创建数据库实例"></a>创建数据库实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名</span><br><span class="line">db.createUser(&#123; user:&#39;xxxx&#39;,pwd:&#39;xxxxxx&#39;,roles:[&#123; role:&#39;root&#39;, db: &#39;admin&#39;&#125;,&#123; role:&#39;dbAdmin&#39;, db: &#39;数据库名&#39;&#125;]&#125;);</span><br><span class="line">db.auth(&#39;xxxx&#39;, &#39;xxxxxx&#39;)</span><br></pre></td></tr></table></figure><h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown学习</title>
      <link href="2021/04/30/markdown-xue-xi/"/>
      <url>2021/04/30/markdown-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="1、标题用-“-”-的个数来区分等级"><a href="#1、标题用-“-”-的个数来区分等级" class="headerlink" title="1、标题用 “#” 的个数来区分等级"></a>1、标题用 “#” 的个数来区分等级</h2><p>例如： “####” 为四级标题</p><h2 id="2、段落没有特殊格式，直接编写文字就好。段落的换行是使用两个以上空格加回车。"><a href="#2、段落没有特殊格式，直接编写文字就好。段落的换行是使用两个以上空格加回车。" class="headerlink" title="2、段落没有特殊格式，直接编写文字就好。段落的换行是使用两个以上空格加回车。"></a>2、段落没有特殊格式，直接编写文字就好。段落的换行是使用两个以上空格加回车。</h2><h2 id="3、字体"><a href="#3、字体" class="headerlink" title="3、字体"></a>3、字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure><p>效果：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p><h2 id="4、分割线"><a href="#4、分割线" class="headerlink" title="4、分割线"></a>4、分割线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure><h2 id="5、删除线"><a href="#5、删除线" class="headerlink" title="5、删除线"></a>5、删除线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure><p>效果：</p><p><del>BAIDU.COM</del></p><h2 id="6、下划线"><a href="#6、下划线" class="headerlink" title="6、下划线"></a>6、下划线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure><p>效果：</p><p><u>带下划线文本</u></p><h2 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h2><ol><li>无序列表：”*” or “+” or “-“</li><li>有序列表：数字 + “.”</li><li>列表嵌套：在子列表中的选项前加四个空格即可</li></ol><h2 id="8、区块"><a href="#8、区块" class="headerlink" title="8、区块"></a>8、区块</h2><p>“&gt;” + 一个空格</p><h2 id="9、代码"><a href="#9、代码" class="headerlink" title="9、代码"></a>9、代码</h2><p>“`” 将片段代码包裹起来<br>“```”包裹代码区块</p><h2 id="10、链接"><a href="#10、链接" class="headerlink" title="10、链接"></a>10、链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [菜鸟教程](https:&#x2F;&#x2F;www.runoob.com) 或 &lt;https:&#x2F;&#x2F;www.runoob.com&gt;</span><br></pre></td></tr></table></figure><p>效果：</p><p>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a>  <a href="https://www.runoob.com/">https://www.runoob.com</a></p><h2 id="11、图片"><a href="#11、图片" class="headerlink" title="11、图片"></a>11、图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><blockquote><p>引用GitHub上的图片的注意点</p><p>若图片无法加载，将路径中的blob改成raw即可</p></blockquote><p>示例：</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/blob/main/image-20210731213910316.png"></p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/image-20210731213910316.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口占用、清除</title>
      <link href="2021/04/27/duan-kou-zhan-yong-qing-chu/"/>
      <url>2021/04/27/duan-kou-zhan-yong-qing-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="windows系统如何查看端口被占用、杀进程"><a href="#windows系统如何查看端口被占用、杀进程" class="headerlink" title="windows系统如何查看端口被占用、杀进程"></a>windows系统如何查看端口被占用、杀进程</h2><p>1、首先是启动windows的命令窗口，按键盘上的windows+R，然后在输入框中输入cmd，既可以启动命令窗口<br>2、进入windows命令窗口之后，输入命令，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><p>然后回车，就可以看到系统当前所有的端口使用情况。<br>3、通过命令查找某一特定端口，在命令窗口中输入命令中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano |findstr &quot;端口号&quot;</span><br></pre></td></tr></table></figure><p>，然后回车就可以看到这个端口被哪个应用占用。<br>4、查看到对应的进程id之后，就可以通过id杀掉端口，使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill &#x2F;pid &quot;端口号&quot; -t -f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客示例</title>
      <link href="2021/04/27/bo-ke-shi-li/"/>
      <url>2021/04/27/bo-ke-shi-li/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-theme-matery博客示例"><a href="#Hexo-theme-matery博客示例" class="headerlink" title="Hexo-theme-matery博客示例"></a>Hexo-theme-matery博客示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: typora-vue-theme主题介绍</span><br><span class="line">date: 2018-09-07 09:25:00</span><br><span class="line">author: 赵奇</span><br><span class="line">img: &#x2F;source&#x2F;images&#x2F;xxx.jpg</span><br><span class="line">top: true</span><br><span class="line">cover: true</span><br><span class="line">coverImg: &#x2F;images&#x2F;1.jpg</span><br><span class="line">password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span><br><span class="line">toc: false</span><br><span class="line">mathjax: false</span><br><span class="line">summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span><br><span class="line">categories: Markdown</span><br><span class="line">tags:</span><br><span class="line">  - Typora</span><br><span class="line">  - Markdown</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 示例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/26/hello-world/"/>
      <url>2021/04/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
