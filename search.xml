<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JVM入门</title>
      <link href="2021/08/04/jvm-ru-men/"/>
      <url>2021/08/04/jvm-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM探究"><a href="#JVM探究" class="headerlink" title="JVM探究"></a>JVM探究</h1><ul><li>对JVM的理解？java8虚拟机和之前的变化？</li><li>什么是OOM，什么事栈溢出StackOverFlowError？怎么分析？</li><li>JVM的常用调优参数有哪些？</li><li>内存快照如何抓取，怎么分析Dump文件？</li><li>JVM中，类加载器的认识？</li></ul><h2 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h2><p>硬件体系-&gt;操作系统-&gt;JVM</p><h2 id="JVM的体系结构"><a href="#JVM的体系结构" class="headerlink" title="JVM的体系结构"></a>JVM的体系结构</h2><p>.java-&gt;Class File-&gt;类加载器 Class Loader-&gt;运行时数据区(Runtime Data Area)</p><p>{</p><pre><code>* 方法区(Method Area)* Java栈(Stack)* 本地方法栈(Native Method Stack)* 堆(Heap)* 程序计数器</code></pre><p>}</p><p>-&gt;本地方法接口-&gt;本地方法库</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_18-53-33.png"></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>作用：加载Class文件</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_19-10-32.png"></p><ol><li>虚拟机自带的加载器</li><li>启动类（根）加载器</li><li>扩展类加载器</li><li>应用程序加载器</li></ol><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><ol><li>类加载器收到类加载的请求</li><li>将这个请求向上委托给父类加载器去完成，一直向上委托，直到根加载器</li><li>启动类加载器检查是否能够加载当前这个类，如果能加载，就使用当前加载器，否则抛出异常，通知子类加载器加载</li><li>重复步骤3</li></ol><h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><p>Java安全模型的核心就是Java沙箱（sandbox），什么是沙箱？沙箱是一个限制程序运行的环境。沙箱机制就是将Java代码限定在虚拟机（JVM）特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。沙箱<strong>主要限制系统资源访问</strong>，那系统资源包括什么？CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。</p><p>所有的Java程序运行都可以指定沙箱，可以定制安全策略。</p><p>在Java中将执行程序分成本地代码和远程代码两种，本地代码默认视为可信任的，而远程代码则被看作是不受信任的。对于授信的本地代码，可以访问一切本地资源。而对于非授信的远程代码在早期的Java实现中，安全依赖于沙箱机制。如下图所示</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_19-51-25.png" alt="JDK1.0安全模型"></p><p>在后续的Java1.1和1.2版本中，分别加入了“安全策略”“代码签名”。</p><p>当前最新的安全机制实现，则引入域（Domain）的概念。虚拟机会把所有代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域（Protected Domain），对应不一样的权限。存在于不同域中的类文件就具有了当前域的全部权限，如下图所示</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_19-59-22.png" alt="最新的安全模型(JDK1.6)"></p><p>组成沙箱的基本组件：</p><ul><li>字节码校验器（bytecode verifier）：确保Java文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</li><li>类装载器（class loader）：其中类装载器在3个方面对Java沙箱起作用<ul><li>它防止恶意代码去干涉善意的代码</li><li>它守护了被信任的类库边界</li><li>它将代码归入保护域，确定了代码可以进行哪些操作</li></ul></li></ul><p>类装载器采用的机制是双亲委派模式</p><ol><li>从最内层JVM自带类加载器开始加载，外层恶意同名类得不到加载从而无法使用</li><li>由于严格通过包来区分了访问域，外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效</li></ol><ul><li>存取控制器：存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定，可以由用户指定。</li><li>安全管理器：是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。</li><li>安全软件包：java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括：<ul><li>安全提供者</li><li>信息摘要</li><li>数字签名</li><li>加密</li><li>鉴别</li></ul></li></ul><h2 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h2><p>凡是带了native关键字的，说明Java的作用范围到达不了，回去调用底层C语言的库，会进入本地方法栈，调用本地方法本地接口JNI</p><p>JNI作用：扩展Java的使用，融合不同的编程语言为Java所用</p><p>Java在内存区域中专门开辟了一块标记区域：Native Method Stack，登记native方法</p><h2 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h2><p>程序计数器：Program Counter Register</p><p>每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来储存指向一条指令的地址，也即将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间。</p><p><u>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关</u></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>数据结构</p><p>程序 = 数据结构 + 算法</p><p>先进后出，后进先出——类比桶</p><p>队列：先进先出（FIFO: First In First Out）</p><p>栈内存：主管程序的运行，生命周期和线程同步，线程结束，栈内存释放，对于栈来说，<strong>不存在垃圾回收问题</strong></p><p>一旦线程结束，栈就结束</p><p>8大基本类型+对象引用+实例方法 =&gt; 栈内存中</p><p>栈运行原理：栈帧</p><p>栈满了：StackOverflowError</p><p>栈+堆+方法区：交互关系</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_21-13-12.png"></p><h2 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h2><ul><li>Sun——HotSpot</li><li>BEA——JRokit</li><li>IBM——J9VM</li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>Heap，一个JVM只有一个堆内存，堆内存的大小是可以调节的</p><p>类加载器读取了类文件后，一般会把什么东西放到堆中？类，方法，常量，变量……保存我们所有引用类型的真实对象</p><p>堆内存中细分为三个区域：</p><ul><li>新生区（伊甸园区）</li><li>老年区</li><li>永久区</li></ul><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-04_21-26-22.png"></p><p>GC垃圾回收，主要是在伊甸园区和养老区</p><p>假设内存满了，OOM（OutOfMemory），堆内存不够</p><p>在JDK8以后，永久存储区改了个名字：元空间</p><h3 id="新生区"><a href="#新生区" class="headerlink" title="新生区"></a>新生区</h3><ul><li>类：诞生和成长的地方，甚至死亡</li><li>伊甸园：所有对象都是在伊甸园区new出来的</li><li>幸存者（0,1）</li></ul><h3 id="老年区"><a href="#老年区" class="headerlink" title="老年区"></a>老年区</h3><h3 id="永久区"><a href="#永久区" class="headerlink" title="永久区"></a>永久区</h3><p>这个区域常驻内存，用来存放JDK自带的Class对象、Interface元数据，存储的是Java运行时的一些环境或类信息，这个区域<strong>不存在垃圾回收</strong>。关闭JVM会释放这个区域的内存</p><ul><li>JDK1.6之前：永久代，常量池是在方法区中</li><li>JDK1.7，永久代，但是慢慢地退化了，<code>去永久代</code>，常量池在堆中</li><li>JDK1.8之后，无永久代，常量池在元空间</li></ul><p>经过研究，99%的对象都是临时对象</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_19-23-08.png"></p><p>元空间：逻辑上存在，物理上不存在</p><p>在一个项目中，突然出现了OOM故障，那么如何排除？</p><ul><li>能够看到第几行出错：内存快照分析工具，MAT、JProfiler</li><li>Debug，一行行代码分析</li></ul><p>MAT、JProfiler作用：</p><ul><li>分析Dump文件，快速定位内存泄漏</li><li>获得堆中的数据</li><li>获得大的对象</li></ul><h2 id="堆内存调优"><a href="#堆内存调优" class="headerlink" title="堆内存调优"></a>堆内存调优</h2><p>OOM：1. 尝试扩大堆内存看结果 2. 分析内存，看哪个地方出现了问题</p><h2 id="JProfiler"><a href="#JProfiler" class="headerlink" title="JProfiler"></a>JProfiler</h2><p>查看堆错误</p><h2 id="GC：垃圾回收"><a href="#GC：垃圾回收" class="headerlink" title="GC：垃圾回收"></a>GC：垃圾回收</h2><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-25-25.png"></p><p>JVM在进行GC时，并不是对这三个区域统一回收，大部分时候，回收都是新生代</p><ul><li>新生代</li><li>幸存区（from， to）</li><li>老年区</li></ul><p>GC两种类型：轻GC（普通GC）、重GC（全局GC）</p><p>GC题目：</p><ul><li>JVM的内存模型和分区 详细到每个区放什么</li><li>堆里面的分区有哪些？Eden， from， to， 老年区，说说特点</li><li>GC算法有哪些？标记清除法，标记压缩，复制算法，引用计数器</li><li>轻GC和重GC分别在什么时候发生？</li></ul><h2 id="GC常用算法"><a href="#GC常用算法" class="headerlink" title="GC常用算法"></a>GC常用算法</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-33-13.png" alt="引用计数法"></p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-42-09.png" alt="复制算法"></p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-46-44.png"></p><ul><li>好处：没有内存的碎片</li><li>坏处：浪费了内存空间，多了一半空间永远是空的。假设对象100%存活（极端情况）</li></ul><p>复制算法最佳使用场景：对象存活度较低的时候：新生区</p><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-55-22.png" alt="标记清除算法"></p><ul><li>优点：不需要额外的空间</li><li>缺点：两次扫描，严重浪费时间，会产生内存碎片</li></ul><h3 id="标记压缩"><a href="#标记压缩" class="headerlink" title="标记压缩"></a>标记压缩</h3><p>再优化</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_20-58-35.png" alt="标记压缩"></p><h3 id="标记清除压缩"><a href="#标记清除压缩" class="headerlink" title="标记清除压缩"></a>标记清除压缩</h3><p>先标记清除几次，再压缩</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>内存效率：复制算法&gt;标记清除算法&gt;标记压缩算法（时间复杂度）</p><p>内存整齐度：复制算法=标记压缩算法&gt;标记清除算法</p><p>内存利用率：标记压缩算法=标记清除算法&gt;复制算法</p><p>思考：有无更优算法？</p><p>答案：没有最好的算法，只有最合适的——&gt;GC：分代收集算法</p><p>年轻代：</p><ul><li>存活率低</li><li>复制算法</li></ul><p>老年代：</p><ul><li>区域大：存活率高</li><li>标记清除（内存碎片不是太多）+标记压缩混合实现</li></ul><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><ol><li><p>什么是JMM？</p><p>JMM：Java Memory Model</p></li><li><p>干什么的？</p><p>官方、博客、视频</p><p>作用：缓存一致性协议，用于定义数据读写的规则</p><p>JMM定义了线程工作内存和主内存之间的抽象关系：线程之间的共享变量储存在主内存中，每个线程都有一个私有的本地内存</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/Snipaste_2021-08-05_21-14-11.png"></p><p>解决共享对象可见性的问题：volilate</p></li><li><p>它该如何学习？</p><p>JMM：抽象的概念，理论</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GUI编程</title>
      <link href="2021/07/31/gui-bian-cheng/"/>
      <url>2021/07/31/gui-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>GUI的核心技术：Swing  AWT</p><ol><li>界面不美观</li><li>需要JRE环境</li></ol><p>为什么要学习？</p><ol><li>可以写出自己心中想要的小工具</li><li>工作时，可能要维护Swing界面</li><li>了解MVC架构，了解监听</li></ol><h3 id="2、AWT"><a href="#2、AWT" class="headerlink" title="2、AWT"></a>2、AWT</h3><h4 id="2-1、AWT介绍"><a href="#2-1、AWT介绍" class="headerlink" title="2.1、AWT介绍"></a>2.1、AWT介绍</h4><ol><li>包含了很多的类和接口</li></ol><p>GUI：图形用户界面编程</p><ol start="2"><li>元素：窗口，按钮，文本框</li><li>java.awt</li></ol><h4 id="2-2、组件和容器"><a href="#2-2、组件和容器" class="headerlink" title="2.2、组件和容器"></a>2.2、组件和容器</h4><h5 id="1、Frame"><a href="#1、Frame" class="headerlink" title="1、Frame"></a>1、Frame</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;我的第一个java图形界面窗口&quot;</span>);</span><br><span class="line">    <span class="comment">//设置可见性</span></span><br><span class="line">    frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    frame.setSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">    frame.setBackground(<span class="keyword">new</span> Color(<span class="number">123</span>, <span class="number">45</span>, <span class="number">243</span>));</span><br><span class="line">    frame.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">    frame.setResizable(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：窗口关闭不掉</p><h5 id="2、Panel"><a href="#2、Panel" class="headerlink" title="2、Panel"></a>2、Panel</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">    Panel panel = <span class="keyword">new</span> Panel();</span><br><span class="line">    frame.setLayout(<span class="keyword">null</span>);</span><br><span class="line">    frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">    frame.setBackground(<span class="keyword">new</span> Color(<span class="number">40</span>,<span class="number">161</span>,<span class="number">35</span>));</span><br><span class="line">    panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">    panel.setBackground(<span class="keyword">new</span> Color(<span class="number">193</span>,<span class="number">15</span>,<span class="number">60</span>));</span><br><span class="line">    frame.add(panel);</span><br><span class="line">    frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决了窗口关闭问题</p><h5 id="3、布局管理器"><a href="#3、布局管理器" class="headerlink" title="3、布局管理器"></a>3、布局管理器</h5><ul><li>流式布局</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">    Button button1 = <span class="keyword">new</span> Button(<span class="string">&quot;button1&quot;</span>);</span><br><span class="line">    Button button2 = <span class="keyword">new</span> Button(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">    Button button3 = <span class="keyword">new</span> Button(<span class="string">&quot;button3&quot;</span>);</span><br><span class="line">    frame.setLayout(<span class="keyword">new</span> FlowLayout(FlowLayout.LEFT));</span><br><span class="line">    frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    frame.add(button1);</span><br><span class="line">    frame.add(button2);</span><br><span class="line">    frame.add(button3);</span><br><span class="line">    frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>东西南北中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Frame testBorderLayout = <span class="keyword">new</span> Frame(<span class="string">&quot;TestBorderLayout&quot;</span>);</span><br><span class="line">    Button east = <span class="keyword">new</span> Button(<span class="string">&quot;East&quot;</span>);</span><br><span class="line">    Button west = <span class="keyword">new</span> Button(<span class="string">&quot;West&quot;</span>);</span><br><span class="line">    Button center = <span class="keyword">new</span> Button(<span class="string">&quot;Center&quot;</span>);</span><br><span class="line">    Button north = <span class="keyword">new</span> Button(<span class="string">&quot;North&quot;</span>);</span><br><span class="line">    Button south = <span class="keyword">new</span> Button(<span class="string">&quot;South&quot;</span>);</span><br><span class="line">    testBorderLayout.add(east,BorderLayout.EAST);</span><br><span class="line">    testBorderLayout.add(west,BorderLayout.WEST);</span><br><span class="line">    testBorderLayout.add(north,BorderLayout.NORTH);</span><br><span class="line">    testBorderLayout.add(south,BorderLayout.SOUTH);</span><br><span class="line">    testBorderLayout.add(center,BorderLayout.CENTER);</span><br><span class="line">    testBorderLayout.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">    testBorderLayout.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表格布局</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;TestGridLayout&quot;</span>);</span><br><span class="line">    Button b1 = <span class="keyword">new</span> Button(<span class="string">&quot;b1&quot;</span>);</span><br><span class="line">    Button b2 = <span class="keyword">new</span> Button(<span class="string">&quot;b2&quot;</span>);</span><br><span class="line">    Button b3 = <span class="keyword">new</span> Button(<span class="string">&quot;b3&quot;</span>);</span><br><span class="line">    Button b4 = <span class="keyword">new</span> Button(<span class="string">&quot;b4&quot;</span>);</span><br><span class="line">    Button b5 = <span class="keyword">new</span> Button(<span class="string">&quot;b5&quot;</span>);</span><br><span class="line">    Button b6 = <span class="keyword">new</span> Button(<span class="string">&quot;b6&quot;</span>);</span><br><span class="line">    frame.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">    frame.add(b1);</span><br><span class="line">    frame.add(b2);</span><br><span class="line">    frame.add(b3);</span><br><span class="line">    frame.add(b4);</span><br><span class="line">    frame.add(b5);</span><br><span class="line">    frame.add(b6);</span><br><span class="line">    frame.pack();</span><br><span class="line">    frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、事件监听"><a href="#4、事件监听" class="headerlink" title="4、事件监听"></a>4、事件监听</h5><p>当某个事情发生的时候，该干什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dogegg.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActionEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按下按钮，触发事件</span></span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        Button button = <span class="keyword">new</span> Button();</span><br><span class="line"></span><br><span class="line">        MyActionListener myActionListener = <span class="keyword">new</span> MyActionListener();</span><br><span class="line">        button.addActionListener(myActionListener);</span><br><span class="line"></span><br><span class="line">        frame.add(button,BorderLayout.CENTER);</span><br><span class="line">        frame.pack();</span><br><span class="line">        windowCLose(frame);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">windowCLose</span><span class="params">(Frame frame)</span> </span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、输入框TextField监听"><a href="#5、输入框TextField监听" class="headerlink" title="5、输入框TextField监听"></a>5、输入框TextField监听</h5><h5 id="6、画笔"><a href="#6、画笔" class="headerlink" title="6、画笔"></a>6、画笔</h5><h5 id="7、鼠标监听"><a href="#7、鼠标监听" class="headerlink" title="7、鼠标监听"></a>7、鼠标监听</h5><h5 id="8、窗口监听-WindowListener"><a href="#8、窗口监听-WindowListener" class="headerlink" title="8、窗口监听 WindowListener"></a>8、窗口监听 WindowListener</h5><h5 id="9、键盘监听"><a href="#9、键盘监听" class="headerlink" title="9、键盘监听"></a>9、键盘监听</h5><h3 id="3、Swing"><a href="#3、Swing" class="headerlink" title="3、Swing"></a>3、Swing</h3><h5 id="1、窗口"><a href="#1、窗口" class="headerlink" title="1、窗口"></a>1、窗口</h5><h5 id="2、弹窗"><a href="#2、弹窗" class="headerlink" title="2、弹窗"></a>2、弹窗</h5><h5 id="3、标签"><a href="#3、标签" class="headerlink" title="3、标签"></a>3、标签</h5><p>label</p><h5 id="4、面板"><a href="#4、面板" class="headerlink" title="4、面板"></a>4、面板</h5><p>JPanel</p><p>JScrollPanel</p><h5 id="5、按钮"><a href="#5、按钮" class="headerlink" title="5、按钮"></a>5、按钮</h5><ul><li>单选按钮</li><li>复选按钮</li></ul><h5 id="6、列表"><a href="#6、列表" class="headerlink" title="6、列表"></a>6、列表</h5><h5 id="7、文本框"><a href="#7、文本框" class="headerlink" title="7、文本框"></a>7、文本框</h5><ul><li>文本框</li><li>密码框</li><li>文本域</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="2021/07/31/jdbc/"/>
      <url>2021/07/31/jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC（重点）"><a href="#JDBC（重点）" class="headerlink" title="JDBC（重点）"></a>JDBC（重点）</h2><h3 id="1、数据库驱动"><a href="#1、数据库驱动" class="headerlink" title="1、数据库驱动"></a>1、数据库驱动</h3><p>程序会通过数据库驱动，和数据库打交道</p><h3 id="2、JDBC"><a href="#2、JDBC" class="headerlink" title="2、JDBC"></a>2、JDBC</h3><p>SUN公司为了简化操作，提供了Java操作数据库的规范</p><p>对于开发人员，只需掌握操作即可</p><h3 id="3、第一个JDBC程序"><a href="#3、第一个JDBC程序" class="headerlink" title="3、第一个JDBC程序"></a>3、第一个JDBC程序</h3><blockquote><p>创建测试数据库</p></blockquote><p>1、创建普通项目</p><p>2、导入数据库驱动</p><p>3、编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;XXXX文件位置&quot;</span>);</span><br><span class="line"><span class="comment">//用户信息和url</span></span><br><span class="line">String url = <span class="string">&quot;jdbc:mysql://xxxx:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8&amp;useSS:=true&quot;</span>;</span><br><span class="line">String userName = xx;</span><br><span class="line">String password = xx;</span><br><span class="line"><span class="comment">//连接成功，connection代表数据库对象</span></span><br><span class="line">Connection connection = DriverManager.getConnection(url, userName, password);</span><br><span class="line"><span class="comment">//执行SQL的对象</span></span><br><span class="line">Statement statement = connection.createStatement();</span><br><span class="line"><span class="comment">//执行SQL的对象去执行SQL，可能存在结果，查看返回结果</span></span><br><span class="line">String sql = <span class="string">&quot;select xxx&quot;</span>;</span><br><span class="line">ResultSet result = statement.executeQuery(sql);<span class="comment">//结果集封装了查询结果</span></span><br><span class="line"><span class="keyword">while</span> (result.next()) &#123;</span><br><span class="line">    System.out.println(result.getObject(<span class="string">&quot;xx&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放连接</span></span><br><span class="line">result.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h3 id="4、SQL注入问题"><a href="#4、SQL注入问题" class="headerlink" title="4、SQL注入问题"></a>4、SQL注入问题</h3><h3 id="5、PreparedStatement对象"><a href="#5、PreparedStatement对象" class="headerlink" title="5、PreparedStatement对象"></a>5、PreparedStatement对象</h3><p>可防止SQL注入，并且效率更高</p><h3 id="6、事务"><a href="#6、事务" class="headerlink" title="6、事务"></a>6、事务</h3><blockquote><p>ACID原则</p></blockquote><p>原子性：要么全部完成，要么都不完成</p><p>一致性：总数不变</p><p><strong>隔离性：多个进程互不干扰</strong></p><p>持久性：一旦提交不可逆，持久化到数据库</p><p>隔离性的问题：</p><p>脏读：一个事务读取了另一个没有提交的事务</p><p>不可重复读：同一个事务内，重复读取数据，数据发生变化</p><p>虚读（幻读）：一个事务内，读取到别人插入的数据</p><h3 id="7、数据库连接池"><a href="#7、数据库连接池" class="headerlink" title="7、数据库连接池"></a>7、数据库连接池</h3><p>数据库连接——执行完毕——释放</p><p>连接——释放十分浪费系统资源</p><p><strong>池化技术：准备一些预先的资源，连接预先准备好的</strong></p><p>最小连接数</p><p>最大连接数</p><p>等待超时</p><p>编写连接池，实现一个接口DataSource</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库的设计</title>
      <link href="2021/07/31/shu-ju-ku-de-she-ji/"/>
      <url>2021/07/31/shu-ju-ku-de-she-ji/</url>
      
        <content type="html"><![CDATA[<p>分析需求：分析业务和需要处理的数据库的需求</p><p>概要设计：设计关系E-R图</p><h3 id="设计数据库的步骤（以个人博客为例）"><a href="#设计数据库的步骤（以个人博客为例）" class="headerlink" title="设计数据库的步骤（以个人博客为例）"></a>设计数据库的步骤（以个人博客为例）</h3><ol><li>收集信息，分析需求</li></ol><ul><li><p>用户表</p></li><li><p>分类表</p></li><li><p>文章表</p></li><li><p>评论表</p></li><li><p>友链表</p></li></ul><ol start="2"><li>标识实体</li><li>标识实体之间的关系</li></ol><h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><p>为什么需要数据规范化？</p><ul><li>信息重复</li><li>更新异常</li><li>插入异常<ul><li>无法正常显示信息</li></ul></li><li>删除异常<ul><li>丢失有效信息</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><h4 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h4><p>原子性：保证每一列不可再分</p><h4 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h4><p>前提：满足第一范式</p><p>每张表只描述一件事情</p><h4 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h4><p>前提：满足第一范式和第二范式</p><p>表中每一列数据都和主键直接相关，而不能间接相关</p><h4 id="规范性-和-性能的问题"><a href="#规范性-和-性能的问题" class="headerlink" title="规范性 和 性能的问题"></a>规范性 和 性能的问题</h4><p>关联查询的表不得超过三张</p><ul><li>考虑商业化的需求和目标，数据库的性能更加重要</li><li>在规范性能的时候，适当考虑规范性</li><li>故意给某些表增加冗余字段</li><li>故意增加计算列（从大数据量降低为小数据量的查询：索引）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的基本程序设计结构</title>
      <link href="2021/07/28/java-de-ji-ben-cheng-xu-she-ji-jie-gou/"/>
      <url>2021/07/28/java-de-ji-ben-cheng-xu-she-ji-jie-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">or</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>注：<code>/**/</code>注释<strong>不可嵌套</strong></p><h3 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">short</span> <span class="keyword">long</span> <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">float</span> <span class="keyword">double</span></span><br><span class="line"><span class="keyword">char</span></span><br><span class="line"><span class="keyword">boolean</span></span><br></pre></td></tr></table></figure><p><strong>Java中大小写敏感</strong></p><p>逐一声明每一个变量可以提高程序的可读性</p><h3 id="3、枚举类型"><a href="#3、枚举类型" class="headerlink" title="3、枚举类型"></a>3、枚举类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">xxx</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="4、数值类型之间的合法转换"><a href="#4、数值类型之间的合法转换" class="headerlink" title="4、数值类型之间的合法转换"></a>4、数值类型之间的合法转换</h3><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/image-20210731213910316.png"></p><p>实线：无信息丢失的转换</p><p>虚线：可能有精度损失的转换</p><h3 id="5、字符串"><a href="#5、字符串" class="headerlink" title="5、字符串"></a>5、字符串</h3><p>Java没有内置的字符串类型，而是在标准Java类库中提供了一个预定义类——String。每个用双引号括起来的字符串都是String类的实例。</p><p>Java中不能修改字符串中的单个字符，String类对象是“不可变的”</p><blockquote><p>检查一个字符串既不是null也不是空串</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() != <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="构建字符串"><a href="#构建字符串" class="headerlink" title="构建字符串"></a>构建字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"><span class="comment">//每次需要添加一部分内容时，就调用append方法</span></span><br><span class="line">builder.append(<span class="string">&quot;ch&quot;</span>);</span><br><span class="line">builder.append(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串构建完成时，就调用toString方法，得到一个String对象，期中包含了构建器中的字符序列</span></span><br><span class="line">String completedString = builder.toString();</span><br></pre></td></tr></table></figure><p>拼接字符串的效率低，耗时，浪费空间，构建字符串解决了这个问题 </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象三大特性</title>
      <link href="2021/06/01/java-mian-xiang-dui-xiang-san-da-te-xing/"/>
      <url>2021/06/01/java-mian-xiang-dui-xiang-san-da-te-xing/</url>
      
        <content type="html"><![CDATA[<p>转自：<a href="https://www.cnblogs.com/hysum/p/7100874.html">https://www.cnblogs.com/hysum/p/7100874.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanUtils的copyproPerties方法的用法</title>
      <link href="2021/05/30/beanutils-de-copyproperties-fang-fa-de-yong-fa/"/>
      <url>2021/05/30/beanutils-de-copyproperties-fang-fa-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>转载自：<a href="https://www.cnblogs.com/luxianyu-s/p/9719668.html">https://www.cnblogs.com/luxianyu-s/p/9719668.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="2021/05/15/linux-ming-ling/"/>
      <url>2021/05/15/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><ul><li>切换目录：<code>cd 目录名</code></li><li>查看目录：<code>ls -1</code></li></ul><h2 id="压缩包操作"><a href="#压缩包操作" class="headerlink" title="压缩包操作"></a>压缩包操作</h2><ul><li>解压缩tar包：<code>tar -xzvf ../xxx.tar</code></li><li>解压缩zip包：<code>unzip ../xxx.zip</code></li></ul><h2 id="不常用命令"><a href="#不常用命令" class="headerlink" title="不常用命令"></a>不常用命令</h2><ul><li>远程登录云服务器：<code>ssh 用户名@公网IP</code></li><li>上传到云服务器：<code>scp xxx.tar 用户名@公网IP:~/</code></li><li>创建目录：<code>mkdir</code></li></ul><h2 id="运行SpringBoot的命令"><a href="#运行SpringBoot的命令" class="headerlink" title="运行SpringBoot的命令"></a>运行SpringBoot的命令</h2><p><code>mvn clean spring-boot:run</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB配置</title>
      <link href="2021/05/01/mongodb-pei-zhi/"/>
      <url>2021/05/01/mongodb-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y update</span><br><span class="line">sudo yum -y install epel-release</span><br><span class="line">sudo yum -y install docker-io</span><br></pre></td></tr></table></figure><h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo docker version</span><br></pre></td></tr></table></figure><h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull mongo:latest</span><br><span class="line">sudo docker images</span><br><span class="line">sudo docker run -itd --name mongo -p 27017:27017 mongo --auth</span><br><span class="line">sudo docker ps</span><br></pre></td></tr></table></figure><h2 id="创建admin账户"><a href="#创建admin账户" class="headerlink" title="创建admin账户"></a>创建admin账户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it mongo mongo admin</span><br><span class="line">db.createUser(&#123; user:&#39;admin&#39;,pwd:&#39;123456&#39;,roles:[ &#123; role:&#39;root&#39;, db: &#39;admin&#39;&#125;]&#125;);</span><br><span class="line">db.auth(&#39;admin&#39;, &#39;123456&#39;)</span><br></pre></td></tr></table></figure><h2 id="创建数据库实例"><a href="#创建数据库实例" class="headerlink" title="创建数据库实例"></a>创建数据库实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名</span><br><span class="line">db.createUser(&#123; user:&#39;xxxx&#39;,pwd:&#39;xxxxxx&#39;,roles:[&#123; role:&#39;root&#39;, db: &#39;admin&#39;&#125;,&#123; role:&#39;dbAdmin&#39;, db: &#39;数据库名&#39;&#125;]&#125;);</span><br><span class="line">db.auth(&#39;xxxx&#39;, &#39;xxxxxx&#39;)</span><br></pre></td></tr></table></figure><h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown学习</title>
      <link href="2021/04/30/markdown-xue-xi/"/>
      <url>2021/04/30/markdown-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="1、标题用-“-”-的个数来区分等级"><a href="#1、标题用-“-”-的个数来区分等级" class="headerlink" title="1、标题用 “#” 的个数来区分等级"></a>1、标题用 “#” 的个数来区分等级</h2><p>例如： “####” 为四级标题</p><h2 id="2、段落没有特殊格式，直接编写文字就好。段落的换行是使用两个以上空格加回车。"><a href="#2、段落没有特殊格式，直接编写文字就好。段落的换行是使用两个以上空格加回车。" class="headerlink" title="2、段落没有特殊格式，直接编写文字就好。段落的换行是使用两个以上空格加回车。"></a>2、段落没有特殊格式，直接编写文字就好。段落的换行是使用两个以上空格加回车。</h2><h2 id="3、字体"><a href="#3、字体" class="headerlink" title="3、字体"></a>3、字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure><p>效果：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p><h2 id="4、分割线"><a href="#4、分割线" class="headerlink" title="4、分割线"></a>4、分割线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure><h2 id="5、删除线"><a href="#5、删除线" class="headerlink" title="5、删除线"></a>5、删除线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure><p>效果：</p><p><del>BAIDU.COM</del></p><h2 id="6、下划线"><a href="#6、下划线" class="headerlink" title="6、下划线"></a>6、下划线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure><p>效果：</p><p><u>带下划线文本</u></p><h2 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h2><ol><li>无序列表：”*” or “+” or “-“</li><li>有序列表：数字 + “.”</li><li>列表嵌套：在子列表中的选项前加四个空格即可</li></ol><h2 id="8、区块"><a href="#8、区块" class="headerlink" title="8、区块"></a>8、区块</h2><p>“&gt;” + 一个空格</p><h2 id="9、代码"><a href="#9、代码" class="headerlink" title="9、代码"></a>9、代码</h2><p>“`” 将片段代码包裹起来<br>“```”包裹代码区块</p><h2 id="10、链接"><a href="#10、链接" class="headerlink" title="10、链接"></a>10、链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [菜鸟教程](https:&#x2F;&#x2F;www.runoob.com) 或 &lt;https:&#x2F;&#x2F;www.runoob.com&gt;</span><br></pre></td></tr></table></figure><p>效果：</p><p>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a>  <a href="https://www.runoob.com/">https://www.runoob.com</a></p><h2 id="11、图片"><a href="#11、图片" class="headerlink" title="11、图片"></a>11、图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><blockquote><p>引用GitHub上的图片的注意点</p><p>若图片无法加载，将路径中的blob改成raw即可</p></blockquote><p>示例：</p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/blob/main/image-20210731213910316.png"></p><p><img src="https://github.com/ZDogEgg/Pics-Images-for-Blog/raw/main/image-20210731213910316.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口占用、清除</title>
      <link href="2021/04/27/duan-kou-zhan-yong-qing-chu/"/>
      <url>2021/04/27/duan-kou-zhan-yong-qing-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="windows系统如何查看端口被占用、杀进程"><a href="#windows系统如何查看端口被占用、杀进程" class="headerlink" title="windows系统如何查看端口被占用、杀进程"></a>windows系统如何查看端口被占用、杀进程</h2><p>1、首先是启动windows的命令窗口，按键盘上的windows+R，然后在输入框中输入cmd，既可以启动命令窗口<br>2、进入windows命令窗口之后，输入命令，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><p>然后回车，就可以看到系统当前所有的端口使用情况。<br>3、通过命令查找某一特定端口，在命令窗口中输入命令中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano |findstr &quot;端口号&quot;</span><br></pre></td></tr></table></figure><p>，然后回车就可以看到这个端口被哪个应用占用。<br>4、查看到对应的进程id之后，就可以通过id杀掉端口，使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill &#x2F;pid &quot;端口号&quot; -t -f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客示例</title>
      <link href="2021/04/27/bo-ke-shi-li/"/>
      <url>2021/04/27/bo-ke-shi-li/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-theme-matery博客示例"><a href="#Hexo-theme-matery博客示例" class="headerlink" title="Hexo-theme-matery博客示例"></a>Hexo-theme-matery博客示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: typora-vue-theme主题介绍</span><br><span class="line">date: 2018-09-07 09:25:00</span><br><span class="line">author: 赵奇</span><br><span class="line">img: &#x2F;source&#x2F;images&#x2F;xxx.jpg</span><br><span class="line">top: true</span><br><span class="line">cover: true</span><br><span class="line">coverImg: &#x2F;images&#x2F;1.jpg</span><br><span class="line">password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span><br><span class="line">toc: false</span><br><span class="line">mathjax: false</span><br><span class="line">summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span><br><span class="line">categories: Markdown</span><br><span class="line">tags:</span><br><span class="line">  - Typora</span><br><span class="line">  - Markdown</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 示例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/26/hello-world/"/>
      <url>2021/04/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
